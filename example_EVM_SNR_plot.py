import matplotlib.pyplot as plt
import numpy as np
from scipy.interpolate import CubicSpline
from scipy.signal import medfilt
from scipy.optimize import curve_fit

# Your EVM and SNR data (replace with your actual data)
EVM_256 = [40.71446025338481, 24.544119375928812, 22.531223861730876, 13.971217241379298, 10.727729790721154, 8.332110718167069, 6.751193145737704, 6.673354768492934, 6.170320450804105, 5.6527315070442565, 4.687093150238887, 4.293404678998931, 4.185221027649212, 3.8204908937030857]  # EVM values
SNR_256 = [8.801459757180941, 9.945789705357154, 10.446714605958988, 12.120525427090355, 13.882682223903176, 15.366414950252018, 16.706309445153984, 17.161699420771107, 19.811583463340508, 20.923978833072425, 22.0537794097756, 23.979039879216625, 25.684615167912725, 26.66339565362978]   # SNR values

EVM_64 = [44.165498280309414, 29.572804980360445, 13.589743164062499, 11.572806334437871, 9.036570538401522, 8.518916230366509, 6.8098776382132, 6.33081175453738, 5.82031901538462, 5.480520506260335, 5.105913161452604, 5.025092471834139, 4.5762283503208705]
SNR_64 = [8.50543342381561, 10.56204409454378, 12.098507557291708, 13.725649315574827, 15.649929262066616, 15.947506678160966, 18.369516846856257, 20.166331824970577, 21.447172973842147, 22.526069626135097, 24.267676415362622, 25.07743720793861, 26.73774274443188]

EVM_16 = [45.06135063397123, 39.800436336144955, 24.306226771234854, 23.350206232998193, 21.203414467424945, 18.45838827935224, 16.621664320858862, 14.057217636060312, 13.801534830387004, 13.203535525787878, 12.337192465016166, 10.89949300250086, 10.713274865156432, 10.407855841766324, 9.687971013759904, 8.492933527286104, 8.325166830745939, 7.596465359477122]
SNR_16 = [8.408270666783318, 9.758424074320699, 11.034310057158036, 12.156310435245395, 12.379291780524825, 13.304442611336025, 14.321456640822971, 15.450229143308876, 17.89298045150504, 17.93210810061606, 19.315243292479053, 20.54561182313928, 22.24225844660194, 23.28375478547855, 23.749011734653482, 25.43236556059107, 26.40335350700496, 27.231790196078443]

EVM_QPSK = [37.74556856116286, 25.51056928583611, 18.997883715793314, 15.56772192567997, 14.31921255880817, 13.7142169969666, 10.650066879276345, 11.492142349604414, 11.561014342507692, 11.431722693761847, 10.727325193407346, 11.227584119182882]
SNR_QPSK = [10.394105809243854, 12.491681333731044, 13.59873472818745, 15.899997025499305, 16.346370146367008, 18.135871723963504, 19.471212740345617, 20.97099274995695, 21.002323271151873, 24.479468628544318, 26.0811913723512, 27.447579891913442]

# sorted_indices = np.argsort(SNR_256)
# sorted_SNR = np.array(SNR_256)[sorted_indices]
# sorted_EVM = np.array(EVM_256)[sorted_indices]

# Smoothing the data using a rolling average
# window_size = 5
# smoothed_EVM = np.convolve(sorted_EVM, np.ones(window_size)/window_size, mode='valid')
# smoothed_SNR = sorted_SNR[window_size//2 : -(window_size//2)]

# evm_db = 20 * np.log10(smoothed_EVM / 100)
# Plotting the smoothed and sorted data
plt.figure(figsize=(10, 8))

# Line plot
plt.plot(SNR_256, EVM_256, '-^', markersize=10, label='256QAM', linewidth=5)
plt.plot(SNR_64, EVM_64, '-*', markersize=10, label='64QAM', linewidth=5)
plt.plot(SNR_16, EVM_16, '-o', markersize=10, label='16QAM', linewidth=5)
plt.plot(SNR_QPSK, EVM_QPSK, '-s', markersize=10, label='QPSK', linewidth=5)

plt.xlabel('SNR (dB)', fontsize=28)
plt.ylabel('EVM', fontsize=28)
# plt.yscale('linear')  # Set y-axis scale to linear
plt.title('EVM vs. SNR', fontsize=28)
yticks = np.arange(5, 45, 5)
plt.yticks(yticks, fontsize=20)
plt.xticks([8, 12, 16, 20, 22, 24,26,28], fontsize=20)
plt.legend(loc="upper right", fontsize=22)
plt.grid(color = 'grey', linestyle = '--', linewidth = 0.5)


plt.savefig("EVM_SNR_nonSmoothed.pdf",bbox_inches='tight')

